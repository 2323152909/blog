(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{359:function(s,a,t){"use strict";t.r(a);var n=t(6),r=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#系列文章"}},[s._v("系列文章")])]),a("li",[a("a",{attrs:{href:"#什么是-dom"}},[s._v("什么是 DOM")])]),a("li",[a("a",{attrs:{href:"#渲染树-最终形成经历了哪些"}},[s._v("渲染树最终形成经历了哪些")]),a("ul",[a("li",[a("a",{attrs:{href:"#html-解析器"}},[s._v("HTML 解析器")])]),a("li",[a("a",{attrs:{href:"#css-解析器"}},[s._v("CSS 解析器")])]),a("li",[a("a",{attrs:{href:"#javascript-对-dom-树与-cssom-树创建的影响"}},[s._v("javascript 对 DOM 树与 CSSOM 树创建的影响")])]),a("li",[a("a",{attrs:{href:"#构建渲染树"}},[s._v("构建渲染树")])]),a("li",[a("a",{attrs:{href:"#本文渲染树形成过程可以做哪些优化"}},[s._v("本文渲染树形成过程可以做哪些优化")])]),a("li",[a("a",{attrs:{href:"#总结"}},[s._v("总结")])]),a("li",[a("a",{attrs:{href:"#参考资料"}},[s._v("参考资料:")])]),a("li",[a("a",{attrs:{href:"#关注我"}},[s._v("关注我")])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"系列文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系列文章"}},[s._v("#")]),s._v(" 系列文章")]),s._v(" "),a("p",[s._v("说一下为什么写这个系列？")]),s._v(" "),a("ul",[a("li",[s._v("原因一：该文章系列不管你是前端开发者，还是后端开发者在面试中经常会被问到一个问题 "),a("code",[s._v("“从浏览器输入url到页面显示经历了哪些？”")]),s._v(" 一个"),a("code",[s._v("非常")]),s._v("常见的问题，看了该系列绝对能惊到面试官，可能就因为这一道面试题就收了你呢！嘿嘿。")]),s._v(" "),a("li",[s._v("原因二：自己主要是后端方向，该系列文章也是为了学习记录，方便以后查阅。极客时间李兵老师也开了这个专栏，看后还有几个疑问的点，自己查询资料学习整理一遍。")])]),s._v(" "),a("h2",{attrs:{id:"什么是-dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dom"}},[s._v("#")]),s._v(" 什么是 DOM")]),s._v(" "),a("p",[s._v("DOM 是 Document Object Model（文档对象模型）的缩写")]),s._v(" "),a("blockquote",[a("p",[s._v("W3C 文档对象模型 （DOM） 是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。-这是 W3Cschool 给的概念")])]),s._v(" "),a("p",[s._v("看了上面的概念好像太“官方”，解释就是 DOM 是对 HTML 文档结构化的表述，后端服务器返回给浏览器渲染引擎的 HTML 文件字节流是无法直接被浏览器渲染引擎理解的，要转化为渲染器引擎可以理解的内部结构，这个结构就是 DOM。\nW3C 那个概念我好像还没有把它全部翻译完，“"),a("strong",[s._v("允许程序和脚本动态地访问和更新文档的内容、结构和样式”")]),s._v("。这里其实就是 DOM 的作用了")]),s._v(" "),a("ol",[a("li",[s._v("页面展示: DOM 是生成页面的基础数据结构")]),s._v(" "),a("li",[s._v("JavaScript 脚本操作: DOM 提供给 JavaScript 脚本操作的接口，JavaScript 可以通过这些接口对 DOM 结构进行访问，从而改变文档的结构和样式")]),s._v(" "),a("li",[s._v("安全: DOM 是一道安全防线，DOM 解析阶段会过滤掉一些不安全的 DOM 内容。")])]),s._v(" "),a("blockquote",[a("p",[s._v("本文我主要以 Webkit 渲染引擎来讲解，Safari 和 Chrome 都使用 Webkit。Webkit 是一款开源渲染引擎，它本来是为 linux 平台研发的，后来由 Apple 移植到 Mac 及 Windows 上。")])]),s._v(" "),a("h2",{attrs:{id:"渲染树最终形成经历了哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染树最终形成经历了哪些"}},[s._v("#")]),s._v(" "),a("strong",[s._v("渲染树")]),s._v("最终形成经历了哪些")]),s._v(" "),a("p",[s._v("先看一张整体的流程图")]),s._v(" "),a("p",[s._v("下面围绕这张图和不同代表性对例子进行讲解。")]),s._v(" "),a("h3",{attrs:{id:"html-解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-解析器"}},[s._v("#")]),s._v(" HTML 解析器")]),s._v(" "),a("p",[s._v("从后端返回给浏览器渲染引擎 HTML 文件字节流，\n第一步要经过的就是渲染引擎中的 HTML 解析器。它实现了将 HTML 字节流转换为 DOM 树 结构。 HTML 文件字节流返回的过程中 HTML 解析器就一直在解析，边加载边解析哦(这里注意下，有些文章写的有问题)。")]),s._v(" "),a("p",[s._v("例子 1:最简单的不带 CSS 和 JavaScript 的 HTML 代码讲解 HTML 解析器")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("前端程序员成长指北"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("根据这段代码具体分析 HTML 解析器做了哪些事")]),s._v(" "),a("h4",{attrs:{id:"阶段一-字节流转换为字符并-w3c-标准令牌化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段一-字节流转换为字符并-w3c-标准令牌化"}},[s._v("#")]),s._v(" 阶段一 字节流转换为字符并 W3C 标准令牌化")]),s._v(" "),a("p",[s._v("读取 HTML 的原始字节流，并根据文件的指定编码（例如 UTF-8）将它们转换成各个字符。\n并将字符串转换成 W3C HTML5 标准规定的各种令牌，例如"),a("code",[s._v("<html>")]),s._v("、"),a("code",[s._v("<body>")]),s._v("，以及其他尖括号内的字符串。每个令牌都具有特殊含义和一组规则。")]),s._v(" "),a("p",[s._v("一堆字节流 "),a("code",[s._v("bytes")])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("3C "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("62")]),s._v(" 6F "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("转成正常的 html 文件")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n      coderlhd\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("前端程序员成长指北"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"阶段二-通过分词器将字节流转化为-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段二-通过分词器将字节流转化为-token"}},[s._v("#")]),s._v(" 阶段二 通过分词器将字节流转化为 Token")]),s._v(" "),a("p",[s._v("分词器将字节流转换为一个一个的 Token，Token 分为 Tag Token 和文本 Token，上面这段代码最后分词器转化后的结果是:")]),s._v(" "),a("h4",{attrs:{id:"阶段三和阶段四-将-token-解析为-dom-节点-并将-dom-节点添加到-dom-树中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段三和阶段四-将-token-解析为-dom-节点-并将-dom-节点添加到-dom-树中"}},[s._v("#")]),s._v(" 阶段三和阶段四 将 Token 解析为 DOM 节点，并将 DOM 节点添加到 DOM 树中")]),s._v(" "),a("p",[s._v("HTML 解析器维护了一个 Token 栈结构（"),a("strong",[s._v("数据结构")]),s._v("真是个好东西），这个栈结构的目的就是用来计算节点间的父子关系，在上一个阶段生成的 Token 会被顺序压到这个栈中，以下是具体规则：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("HTML 解析器开始工作时，会默认创建了一个根为 document 的空 DOM 结构，同时会将一个 StartTag document 的 Token 压入栈底。")])]),s._v(" "),a("li",[a("p",[s._v("如果压入到栈中的 StartTagToken，HTML 解析器会为该 Token 创建一个 DOM 节点，然后将这个 Dom 节点加入到 DOM 树中，它的"),a("code",[s._v("父节点")]),s._v("就是栈中相邻的那个元素生成的 DOM 节点")])]),s._v(" "),a("li",[a("p",[s._v("如果分词器解析出来的是文本 Token，那么会生成一个文本节点，然后把这个文本 Dom 节点加入到 DOM 树中（注:文本 Token 不需入栈）,它的"),a("code",[s._v("父节点")]),s._v("就是当前栈顶 Token 所对应的 DOM 节点。")])]),s._v(" "),a("li",[a("p",[s._v("如果分词器解析出来的是 EndTag 标签，比如例子中的 EndTag div，HTML 解析器会查看 Token 栈顶的元素是否是 StartTag div，如果是，就将 StartTag div 从栈中弹出，边上该 div 元素解析完成。")])]),s._v(" "),a("li",[a("p",[s._v("最后按照上面的规则，分词器一路解析下来，就形成了这个简单的 DOM 树。")])])]),s._v(" "),a("p",[s._v("此时应该搞懂了核心图中 HTML 解析器的部分，和 DOM 树的基本绘制流程，但是现实很残酷，哪里有这么简单的前端代码，还有有 JavaScript 和 CSS 呢！继续往下看")]),s._v(" "),a("h3",{attrs:{id:"css-解析器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-解析器"}},[s._v("#")]),s._v(" CSS 解析器")]),s._v(" "),a("p",[s._v("CSS 解析器最终的目的也是构建树不过它构建的树是 CSSOM 树\n树的构建流程和 DOM 树的构建流程基本相同")]),s._v(" "),a("p",[s._v("还是那张图，具体我就不一一讲解一遍了。直接用这个简单例子")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("body")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 16px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("div")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("font-weight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" bold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v("div p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" none"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("看下最后构造的 CSSOM 树")]),s._v(" "),a("p",[s._v("CSSOM 为何具有树结构？为页面上的任何对象计算最后一组样式时，浏览器都会先从适用于该节点的最通用规则开始（例如，如果该节点是 body 元素的子项，则应用所有 body 样式），然后通过应用更具体的规则（即规则“向下级联”）以递归方式优化计算的样式。")]),s._v(" "),a("p",[s._v("以上面的 CSSOM 树为例进行更具体的阐述。span 标记内包含的任何置于 body 元素内的文本都将具有 16 像素字号，并且颜色为红色 — font-size 指令从 body 向下级联至 span。不过，如果某个 span 标记是某个段落 (p) 标记的子项，则其内容将不会显示。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意点:")]),s._v(" "),a("ol",[a("li",[s._v("CSS 解析可以与 DOM 解析同进行")]),s._v(" "),a("li",[s._v("如果只有 CSS 和 HTML 的页面，CSS 不会影响 DOM 树的创建，但是如果页面中还有 JavaScript，结论就不一样了，请继续往下看。")])])]),s._v(" "),a("h3",{attrs:{id:"javascript-对-dom-树与-cssom-树创建的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-对-dom-树与-cssom-树创建的影响"}},[s._v("#")]),s._v(" javascript 对 DOM 树与 CSSOM 树创建的影响")]),s._v(" "),a("p",[s._v("上面两个例子中都还没有 javascript 的出现，接下来说下 JavaScript 对 DOM 树和 CSSOM 树构建的影响。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("情况 1：当前页面中只有 Html 和 JavaScript，而且 JavaScript 非外部引入")]),s._v(" "),a("p",[s._v("DOM 树构建时当遇到 JavaScript 脚本，就要暂停 DOM 解析，先去执行 Javascript，因为在 JavaScript 可能会操作当前已经生成的 DOM 节点。")]),s._v(" "),a("p",[s._v("有一点需要注意:javascript 是可能操作"),a("strong",[s._v("当前已经生成的 DOM 节点")]),s._v("，如果是后面还未生成的 DOM 节点是不生效的，比如这段代码:")]),s._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("1"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" div1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      div1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("innerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'前端程序员成长指北'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" div2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getElementsByTagName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'div'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      div2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("innerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'kaola'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    ")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("test"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("</")]),s._v("html")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("显示结果为两行：\n第一行结果是前端程序员成长指北\n第二行记过是 test\n因为在执行第三行和第四行 script 脚本的时候，DOM 树中还没有生成第二个 div 对应的 dom 节点。")])]),s._v(" "),a("li",[a("p",[s._v("情况 2：当页面中同时有 Html JavaScript CSS ，而且都非外部引入")]),s._v(" "),a("p",[s._v("DOM 树构建时当遇到 JavaScript 脚本，就要暂停 DOM 解析，先去执行 JavaScript，同时 JavaScript 还要判断 CSSOM 是否解析完成，因为在 JavaScript 可能会操作 CSSOM 节点，CSSOM 节点确认解析完成，执行 JavaScript 再次回到 DOM 树创建。（"),a("strong",[s._v("所以这里也可以所 CSS 解析间接影响 DOM 树创建")]),s._v("）")])]),s._v(" "),a("li",[a("p",[s._v("情况 3：当页面中同时有 Html，JavaScript， CSS ，而且外部引入")]),s._v(" "),a("p",[s._v("Webkit 渲染引擎有一个优化，当渲染进程接收 HTML 文件字节流时，会先开启一个预解析线程，如果遇到 JavaScript 文件或者 CSS 文件，那么预解析线程会提前下载这些数据。当渲染进程接收 HTML 文件字节流时，会先开启一个预解析线程，如果遇到 JavaScript 文件或者 CSS 文件，那么预解析线程会提前下载这些数据。DOM 树在创建过程中如果遇到 JavaScript 文件，接下来就和情况 2 类型一样了。")])])]),s._v(" "),a("p",[s._v("影响关系图:\n画了一张影响关系图希望大家更好的记忆:")]),s._v(" "),a("h3",{attrs:{id:"构建渲染树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建渲染树"}},[s._v("#")]),s._v(" 构建渲染树")]),s._v(" "),a("p",[s._v("通过 DOM 树和 CSSOM 树，浏览器就可以通过二者构建渲染树了。浏览器会先从 DOM 树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的 CSS 样式规则并应用。具体的规则有以下几点需要注意：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Render Tree 和 DOM Tree 不完全对应。")])]),s._v(" "),a("li",[a("p",[s._v("请注意 visibility: hidden 与 display: none 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 (display: none) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分")])])]),s._v(" "),a("p",[s._v("看一下前问中提到的 DOM 树和 CSSOM 树最终合成的渲染树结果是:")]),s._v(" "),a("h3",{attrs:{id:"本文渲染树形成过程可以做哪些优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本文渲染树形成过程可以做哪些优化"}},[s._v("#")]),s._v(" 本文渲染树形成过程可以做哪些优化")]),s._v(" "),a("p",[s._v("看完了渲染树的形成，在开发过程中我们能做哪些优化？(注意这里的优化只是针对渲染树形成部分，其他的优化会在系列文章之后继续讲)")]),s._v(" "),a("ol",[a("li",[s._v("在引入顺序上，CSS 资源先于 JavaScript 资源。样式文件应当在 head 标签中，而脚本文件在 body 结束前，这样可以防止阻塞的方式。")]),s._v(" "),a("li",[s._v("尽量减少在 JavaScript 中进行 DOM 操作。")]),s._v(" "),a("li",[s._v("简化并优化 CSS 选择器，尽量将嵌套层减少到最小。")]),s._v(" "),a("li",[s._v("修改元素样式时，更改其 class 属性是性能最高的方法。")])]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("看完这篇文章赶紧检测一下你写的前端代码，脑补一下渲染树形成过程，想想自己代码有没有需要改善的地方，系列文章会继续分享，下篇该系列文章渲染树的布局与绘制以及虚拟 DOM 树出现的必要性，感谢观看。")]),s._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料:")]),s._v(" "),a("p",[s._v("极客时间浏览器专栏")]),s._v(" "),a("p",[s._v("浏览器渲染原理: https://srtian96.gitee.io/blog/2018/06/01/浏览器渲染原理/")]),s._v(" "),a("h3",{attrs:{id:"关注我"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关注我"}},[s._v("#")]),s._v(" 关注我")]),s._v(" "),a("p",[s._v("觉得不错点个 Star，欢迎 加群 互相学习。")])])}),[],!1,null,null,null);a.default=r.exports}}]);